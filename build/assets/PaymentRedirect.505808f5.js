import{r as c,j as i,F as u}from"./index.5791bf1f.js";import{R as l,g as n}from"./globalVars.97df2e75.js";function f(){const e=new l(n.pocketbaseDomain),[a,o]=c.exports.useState(!0);if(a){o(!1);const r=new URLSearchParams(window.location.search);if(r.get("resubscribe")?m(e).then(t=>window.location.href=t):s(e).then(t=>window.location.href=t.paymentURL),e.authStore.isValid)d();else{const t=r.get("paymentPlan");t?window.location.href=`/signup?paymentPlan=${t}`:window.location.href="/signup"}}return i(u,{})}const d=async()=>{try{const e=await client.collection("users").getOne(client.authStore.model.id,{});e.createdSubscription==!0?window.location.href="/":e.createdSubscription==!1&&s(client).then(a=>window.location.href=a.paymentURL)}catch{}},s=async e=>{const o=new URLSearchParams(window.location.search).get("paymentPlan");return await e.collection("users").update(e.authStore.model.id,{updatePaymentURL:!0,subscriptionPlan:o}),await fetch(`${n.pocketbaseDomain}/api/updatePaymentURL`),e.collection("users").getOne(e.authStore.model.id,{})};async function m(e){return await e.collection("users").update(e.authStore.model.id,{updateCustomerPortalURL:!0}),await fetch(`${n.pocketbaseDomain}/api/updateCustomerPortalURL`),(await e.collection("users").getOne(e.authStore.model.id,{})).customerPortalURL}export{f as default};
